GHeimdall Manual
$Id$

Copyright (C) 2007 SIOS Technology, Inc.

Author: Takashi Matsuo <tmatsuo@sios.com>

Table of contents
1. Overview
1.1. What can GHeimdall do?
1.2. Plug-in architecture
1.3. Platform
2. Install
2.1. Dependencies
2.2. Installation of gheimdall
2.3. Preparation
2.3.1. Enable SSO
2.3.2. Creating a key pair
2.4. Settings
2.5. Apache settings
2.5.1. Run gheimdall with mod_proxy
2.5.2. Run gheimdall with mod_python
2.6. PAM settings
2.7. Prepare log directory
2.8. Run GHeimdall
2.9. Startup script
3. Extend GHeimdall
3.1. Common rule
3.2. Create an authenticate module
3.3. Create a change-passwords module
3.4. Create a username mapper module


1. Overview

This program is a TurboGears project for Google Apps SSO service. This
program enables you to authenticate Google Apps users by your own
authenticate back end. There is a functionality for changing users'
passwords for an option.

1.1. What can GHeimdall do?

 1.1.1. Things which GHeimdall can do.

 Google Apps SSO authentication, changing users' passwords. (can
 change both passwords of Google and your back end simultaneously.)

 1.1.2. Things which GHeimdall can not do.

 To create and delete Google Apps account. To synchronize accounts
 data between Google Apps and your back end.

1.2. Plug-in architecture

GHeimdall adopts a simple plug-in architecture. You can use plug-ins
for at following functionalities. When plug-ins included in GHeimdall
can not satisfy your needs, you should develop your own plug-ins for
your needs.

 1) Authentication

    You can choose an authentication plug-in for your authentication
    back end. GHeimdall initially includes both of PAM authentication
    plug-in and LDAP authentication plug-in. GHeimdall also have an
    functionality for HTTP header authentication. When you turned on
    this functionality, GHeimdall will assume the value of specified
    HTTP header as their user name. It is useful when users are
    already authenticated by Apache's basic authentication, or by
    their client certificate.

 2) User name mapping

    If the user name which is used by your authenticate back end and
    the user name of Google Apps differ, you can use some user name
    mapper plug-in for transformation of the user name.

 3) Changing passwords

    You can plug-in a functionality of changing users'
    passwords. GHeimdall initially includes both of PAM and LDAP
    changing-password plug-ins.

1.3. Platform

Now, I tested gheimdall under CentOS5 and Debian/sid.

2. Install

2.1. Dependencies

Following are set of software which must be installed for
gheimdall. Please install these software.

  1) Apache web server 
  2) TurboGears 1.0.3 or higher
     http://www.turbogears.org/ 
  3) PyXMLSec
     http://pyxmlsec.labs.libre-entreprise.org/ 
  4) PyPAM (If you use PAM authentication)*1
     http://www.pangalactic.org/PyPAM/
  5) gdata-python-client 1.0.4 or higher
     (If you want to change Google Apps password too)
     http://code.google.com/p/gdata-python-client/
  6) python-ldap
     http://python-ldap.sourceforge.net/

*1 PyPAM-0.5.0 has a known problem. It sometimes dies for double
   free. Now we are testing a patch. If you want to use this
   experimental patch, please contact at Takashi Matsuo
   <tmatsuo@sios.com>.

2.2. Installation of gheimdall

It is ease to install gheimdall.

$ tg-admin i18n compile
$ python setup.py build 
$ sudo python setup.py install 

2.3. Preparation

 2.3.1. Enable SSO

 You have to enable SSO Service on Google Apps's web
 console. Additionally, you must set some of following URLs on the
 console. By default, following are the URLs for each functionalyty.

  1. Login
     http://your.domain.example.com/gheimdall/login 
  2. Logout
     http://your.domain.example.com/gheimdall/logout 
  3. Change Passwords
     http://your.domain.example.com/gheimdall/passwd 

 2.3.2. Creating a key pair

 You need to generate an rsa or dsa key pair for Google Apps SSO
 Service. Here is an example which shows how to generate an rsa key
 pair using openssl. (Yet lacking of attention in this example, you
 should take care of the permission of generated private key.)

# openssl genrsa -des3 -out privkey.pem 2048 
# openssl rsa -in privkey.pem -out privkey-nopass.pem 
# openssl rsa -in privkey-nopass.pem -pubout -outform DER -out publickey.der

 You can use privkey-nopass.pem as private key, and publickey.der as
 public key. Please upload the public key on Google Apps web console.

2.4. Settings

Let's glance through all settings of this program.

apps.domain 
  description: Set your Google Apps domain.
  example: 'example.com' 

apps.privkey_filename 
  description: Set fullpath of private key generated on instruction 2.3.2.
  example: '/some/where/privkey-nopass.pem' 

apps.auth_engine 
  description: Set module name for authentication.
  example: 'pam' 

apps.pam_appname 
  description: Set pam service name.
  example: 'gheimdall' 

apps.uname_mapper 
  description: Set module name for username mapper.
  example: 'null' 

apps.use_change_passwd 
  description: Set whether you want use change-passwords functionality.
  example: True

apps.use_reset_passwd
  description: Set whether you want use reset-passwords functionality.
  example: False

apps.passwd_engine 
  description: Set module name for change-passwords functionality.
  example: 'pam' 

apps.passwd_regex 
  description: Set regexp for password policy.
  example: '^.{8,}$' 

apps.use_header_auth 
  description: Set whether you want use HTTP header authentication.
  example: False

apps.auth_header_key 
  description: Set header name for HTTP header authentication.
  example: 'SSL-CLIENT-S-DN-CN' 

apps.domain_admin 
  description: Set user name of the administrator of Google Apps domain.
  example: 'admin' 

apps.admin_passwd 
  description: Set password of the administrator of Google Apps domain
  example: 'password' 

apps.hash_function_name
  description: Set it to 'SHA-1' if you want to send hashed passwords
  to google.
  example: 'SHA-1'

apps.ldap_uri 
  description: Set the uri for ldap server.
  example: 'ldap://ldap.example.com/' 

apps.ldap_basedn 
  description: Set basedn for ldapsearch.
  example: 'dn=example,dn=com' 

apps.ldap_filter 
  description: Set format of the filter for ldapsearch. %s is replaced
               with user name.
  example: 'uid=%s' 

apps.ldap_rootdn
  description: Set ldap's admin distinguished name.
  example: 'cn=admin,dc=example,dc=com'

apps.ldap_rootpw
  description: Set ldap's admin password.
  example: 'password'

apps.ldap_passwd_hash_style
  description: Set ldap password hash style.
  example: '{SHA}'

2.5. Apache settings

GHeimdall is designed to run behind apache. You can choose one of the
following.

 2.5.1. Run GHeimdall with mod_proxy

 Configure apache referring samples/apache-modproxy.sample. In this
 case, you need a startup script for cherrypy. We verify that this
 will work, but we recommend to run gheimdall with mod_python as
 following.

 2.5.2. Run GHeimdall with mod_python

 First, copy samples/apache-modpython.sample to
 /etc/httpd/conf.d/gheimdall.conf. Next, make /etc/gheimdall
 directory, and copy prod.cfg, samples/modpython_gateway.py, and
 samples/gheimdall_modpython.py to /etc/gheimdall.

2.6. PAM settings

If you use PAM authentication module, additionally you need configure
PAM. Please copy samples/pam.sample to /etc/pam.d/gheimdall, and edit
it appropriately. And you need to configure PAM module too.

2.7. Prepare directories

By default, log directory is /var/log/gheimdall, and session files are
stored in /var/gheimdall. Please make these directories, and configure
permissions of these directories that GHeimdall running uid/gid can
write in these direcotries. For example, if GHeimdall is running with
mod_python, configure permissions for apache to write.

2.8. Run GHeimdall

If you choose mod_proxy, you need to run not only apache but also
cherrypy for GHeimdall. To do this, please use following commands.

$ start-gheimdall.py /some/where/prod.cfg

Please confirm this proccess listening tcp 8007.

2.9. Startup script

Startup script(when using mod_proxy) is under preparation.

3. Extend GHeimdall

3.1. Common rule

The class in the module which you write, always needs _prepare(self,
config) method. This method receives config object compatible with
TurboGears as a parameter, save values for operation to instance
variable of object itself. And you also need set the class itself to
'cls' variable in the global scope of this module.

3.2. Create an authenticate module

To create your own authenticate module, you have to create a module
under gheimdall/auth directory, and define a class extended from
gheimdall.auth.BaseAuthEngine inside the module. In this class, you
have to implement _prepare(self, config) and _authenticate(self,
user_name, password) instance methods. There is a sample module,
gheimdall/auth/sample.py is for your reference.

Following are the rules for each methods.

 1) _authenticate(self, user_name, password)

    Return True if authentication succeed. Raise
    gheimdall.auth.AuthException when authentication failed.

 2) _postAuthHook(self, user_name, password)

    This method is an option. If there is some operations after user
    authenticated, please do the job in this method. If the job fails,
    and you want this failure assumed to failure of authentication,
    Raise gheimdall.auth.AuthException.

3.3. Create a change-passwords module

To create your own change-passwords module, you have to create a
module under gheimdall/passwd directory, and define a class extended
from passwd.BasePasswdEngine or gheimdall.passwd.BaseSyncPasswdEngine
inside the module. BasePasswdEngine is for only changing passwords of
your back end. BaseSyncPasswdEngine is for changing both of Google
Apps password and your backend password simultaneously. In this class,
you have to implement _prepare(self, config) and
_changeLocalPassword(self, user_name, old_password, new_password)
instance methods.

Following are the rules for each methods.

 1) _changeLocalPassword(self, user_name, old_password, new_password)

    Return True if changing password succeed. Raise
    gheimdall.passwd.PasswdException when failure.

3.4. Create a username mapper module

To create your own username mapper module, you have to create a module
under gheimdall/unamemapper directory, and define a class extended
from gheimdall.unamemapper.UnameMapper inside the module. In this
class, you have to implement _prepare(self, config) and
getGoogleUsername(self, user_name) instance methods.

 1) getGoogleUsername(self, user_name)

    Return user name for Google Apps which is converted from user name
    which the user have just entered. If fails, raise
    gheimdall.auth.AuthException.

EOF
